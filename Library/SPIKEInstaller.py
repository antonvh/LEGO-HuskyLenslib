import ubinascii, uos, machine,uhashlib
from ubinascii import hexlify
b64="""TQUCHyCLCOgQTgAHMi4uL0xpYnJhcnkvcHlodXNreWxlbnMucHk5KDA5UGUlRYAdHx8fK2YkJCQkJCQkJEQkJGQgixSLEouqAIAQEHNsZWVwX21zEBB0aWNrc19tcyoCGwh0aW1lHAUWARwFFgFZgFEbDHN0cnVjdBYBgBAASCoBGwBzHABIFgBIWYAQCmF0YW4yEA5kZWdyZWVzKgIbCG1hdGgcBRYBHAUWAVmAEAhwb3J0KgEbBmh1YhwDFgFZMgIWCGJ5dGUjABYMSEVBREVSIwEWDEZBSUxFRDIDEQB8oCI+NAI0ATAeFg5SRVFVRVNUFhxSRVFVRVNUX0JMT0NLUxYcUkVRVUVTVF9BUlJPV1MWHlJFUVVFU1RfTEVBUk5FRBYsUkVRVUVTVF9CTE9DS1NfTEVBUk5FRBYsUkVRVUVTVF9BUlJPV1NfTEVBUk5FRBYaUkVRVUVTVF9CWV9JRBYoUkVRVUVTVF9CTE9DS1NfQllfSUQWKFJFUVVFU1RfQVJST1dTX0JZX0lEFhZSRVRVUk5fSU5GTxYYUkVUVVJOX0JMT0NLFhhSRVRVUk5fQVJST1cWGlJFUVVFU1RfS05PQ0sWIlJFUVVFU1RfQUxHT1JJVEhNFhJSRVRVUk5fT0sWJlJFUVVFU1RfQ1VTVE9NTkFNRVMWGlJFUVVFU1RfUEhPVE8WJFJFUVVFU1RfU0VORF9QSE9UTxYuUkVRVUVTVF9TRU5EX0tOT1dMRURHRVMWNFJFUVVFU1RfUkVDRUlWRV9LTk9XTEVER0VTFiZSRVFVRVNUX0NVU1RPTV9URVhUFiRSRVFVRVNUX0NMRUFSX1RFWFQWGlJFUVVFU1RfTEVBUk4WHFJFUVVFU1RfRk9SR0VUFi5SRVFVRVNUX1NFTkRfU0NSRUVOU0hPVBYuUkVRVUVTVF9TQVZFX1NDUkVFTlNIT1QWPFJFUVVFU1RfTE9BRF9BSV9GUkFNRV9GUk9NX1VTQhYcUkVRVUVTVF9JU19QUk8WMFJFUVVFU1RfRklSTVdBUkVfVkVSU0lPThYWUkVUVVJOX0JVU1kRBRYaUkVUVVJOX0lTX1BST4AWNEFMR09SSVRITV9GQUNFX1JFQ09HTklUSU9OgRYyQUxHT1JJVEhNX09CSkVDVF9UUkFDS0lOR4IWOEFMR09SSVRITV9PQkpFQ1RfUkVDT0dOSVRJT06DFi5BTEdPUklUSE1fTElORV9UUkFDS0lOR4QWNkFMR09SSVRITV9DT0xPUl9SRUNPR05JVElPToUWMkFMR09SSVRITV9UQUdfUkVDT0dOSVRJT06GFj5BTEdPUklUSE1fT0JKRUNUX0NMQVNTSUZJQ0FUSU9OhxY6QUxHT1JJVEhNX1FSX0NPREVfUkVDT0dOSVRJT06IFjpBTEdPUklUSE1fQkFSQ09ERV9SRUNPR05JVElPToEWDEFSUk9XU4IWDEJMT0NLU4MWCkZSQU1FVDIEEApBcnJvdzQCFgFUMgUQCkJsb2NrNAIWAVQyBhASSHVza3lMZW5zNAIWASL/HCKAZCoCUzMHFhJjbGFtcF9pbnRRYwIGYgNVqhFiAEgRDghieXRlMi4uL0xpYnJhcnkvcHlodXNreWxlbnMucHmABwASAEKwKwE0AWMAAAZudW10QQ4UPGxpc3Rjb21wPgWAKQArALBfSwwAwRIHsTQBLxRC8X9jAAAABYEMABIPBYw+hQoAEQAXFgAWEAMWABoyABYAETIBFgAbUWMAAoJY0gQcABEDgD8lJSUlJS80ALGwGAx4X3RhaWyysBgMeV90YWlss7AYDHhfaGVhZLSwGAx5X2hlYWS1sBgESUS1gNhEBIBSQgGAULAYDmxlYXJuZWQSDmRlZ3JlZXMSCmF0YW4ysbPzsrTzNAI0AbAYEmRpcmVjdGlvbhAKQVJST1ewGACeUWMAAACJExMTExOBPEEaABsVgEklJCQkJCQAIwEUAFSwEwuwEwuwEwuwEwuwEw+wEw02BmMBAACJc0hBUlJPVyAtIHggdGFpbDp7fSwgeSB0YWlsOnt9LCB4IGhlYWQ6e30sIHkgaGVhZDp7fSwgZGlyZWN0aW9uOiB7fSwgSUQ6e32BDAASIw+MUoUJABEAFxYAFhADFgAaMgAWABEyARYAG1FjAAKCBLoEGgARA4BTJSUlJSUvALGwGAJ4srAYAnmzsBgKd2lkdGi0sBgMaGVpZ2h0tbAYDbWA2EQEgFJCAYBQsBgfEApCTE9DS7AYAJ5RYwAAAIkNDQ0NDYEoORgAGw+AXCUkJCQkACMBFABUsBMLsBMLsBMLsBMLsBMLNgVjAQAAiXMuQkxPQ0sgLSB4Ont9LCB5Ont9LCB3aWR0aDp7fSwgaGVpZ2h0Ont9LCBJRDp7fYU4EEYtDYxkjQ9qIIoLjRiFFIUIZSBlIIUZigmKCYoJjAtlIAARABcWABYQAxYAGiKAywBQKgJTMwIWABERAJQyAzQBFhpjYWxjX2NoZWNrc3VtIwAqAVMzBBYSd3JpdGVfY21kgSIyIwEqA1MzBRYUZm9yY2VfcmVhZDIGFhByZWFkX2NtZDIHFhBjaGVja19vazIIFgprbm9jazIJFg5zZXRfYWxnMgoWGHByb2Nlc3NfaW5mb1FQKgJTMwsWFGdldF9ibG9ja3NRUCoCUzMMFhRnZXRfYXJyb3dzUVAqAlMzDRYAVoqKKgIqAVMzDhYSc2hvd190ZXh0Mg8WFGNsZWFyX3RleHQyEBYWZ2V0X3ZlcnNpb25RYwIPYgBiAIQkuIQBIgARHYBlJS4rKSspKykpcQCzsBgKZGVidWcSAFAQCnBvcnQusfI0AbAYCHVhcnSwEwEUCG1vZGWBNgFZEhBzbGVlcF9tcyKCLDQBWbATBRQIYmF1ZLI2AVkSBSKCLDQBWbATBRQAfaA2AVkSEHRpY2tzX21zNACwGBRuZXh0X3dyaXRlsBQhNgBDEYASAHsjBBQAVLE2ATQBWUIJgBIAexASQ29ubmVjdGVkNAFZUWMBAACJEHBvcnRfc3RyDxVzOEh1c2t5bGVucyBjb25uZWN0aW9uIGZhaWxlZC4gQ2hlY2sgd2lyZXMgYW5kIHBvcnQgaXMge30/eCEOLxmAdQASCGJ5dGUSAJkSAECwNAE0ASKBf+80AWMAAAhkYXRhgmTDARwzB4B4LCoqKycgTQASBxIAa7I0ATQBwxIMSEVBREVSs/Kx8rLyxLSwFAu0NgHlxLATGxQApLQ2AVmwEw9EDYASAHsQDFNlbnQ6ILQ0AllCB4ASH4U0AVlRYwAAAIkOY29tbWFuZA5wYXlsb2FkhSDYhQEuOxWAhSMrJ0YjJCQwMSUrQidLLTMAIwTEsBMPFAB9sTYBxbKAQnCAV8a1UdlEA4AjBcW0teXEs0QmgBIAa7Q0ARIAa7M0AdtEE4C0EgBrszQB0VEuAlWz2UQCgLNjQg2AEgBrtDQBsdlEAoC0YxILgTQBWbATAxQAfYE2AcW2g9hEEICwEw9ECYASAHsjBrY0AlmB5Vha10OKf1lZtGMDAACJCHNpemUSbWF4X3RyaWVzDHNlYXJjaGIAYgBzJldhaXRpbmcgZm9yIGRhdGEgaW4gZm9yY2UgcmVhZC4gVHJpZXM6hUxhKhByZWFkX2NtZA+Am2NALikvKSgoKCooND8oACMBwbAUERAHEhs2ggDCshIB3tNEGICwEw9ECIASAHsjAjQBWRIMRkFJTEVEEBJObyBoZWFkZXIqAmOwFAuBNgHDsBQBgTYBxLOAVYDYRAqAsBQBs4BVNgHBsBQBgTYBxbWwFB8SC7PytPKx8jYB3EQngLATC0QYgBIAeyMDtbAUBRIFs/K08rHyNgE0A1kSCyMEKgJjtLEqAmMEAACJYgBzGE5vIGFuc3dlciBmcm9tIGh1c2t5bGVuc3MPQ2hlY2tzdW0gZmFpbGVkcwxCYWQgY2hlY2tzdW2BPDEWEGNoZWNrX29rEYCvKihCKgCwFBM2ADACwcKxEhJSRVRVUk5fT0vZRAKAUmMSAHsjAbGyNANZUGNRYwEAAIlzFUV4cGVjdGVkIE9LLCBidXQgZ290OmwZEDEHgLcqALAUKRIaUkVRVUVTVF9LTk9DSzYBWbAUDTYAYwAAAImBLEoQDnNldF9hbGcJgLs6ALAUCRIiUkVRVUVTVF9BTEdPUklUSE0QKRIMc3RydWN0FAhwYWNrEAJosTYCNoIBWbAUETYAYwAAAIkSYWxnb3JpdGhthwCZEDIYcHJvY2Vzc19pbmZvE4C/IyMqKCdIM1AnKig6KFonUiUjACsAwSsAwrAUHTYAMALDxLMSFlJFVFVSTl9JTkZP3EQPgLATJ0QIgBIAeyMBNAFZEhMUDHVucGFjaxAKaGhoaGi0NgIwBcXGx8jIsBMHRAmAEgB7tba3NANZtYBCYYBXybAUCzYAMALKy7oSGFJFVFVSTl9CTE9DS9lEGoCxEgpCbG9jaxINFA0QDbs2AlM1ACsB5cFCMYC6EhhSRVRVUk5fQVJST1fZRBqAshIKQXJyb3cSCRQJEAm7NgJTNQArAeXCQg+AsBMRRAiAEgB7IwI0AVmB5Vha10OZf1lZLAOxgmKygWK3g2JjAgAAiXMNRXhwZWN0ZWQgaW5mb3MZRXhwZWN0ZWQgYmxvY2tzIG9yIGFycm93c4JAy4ABFhRnZXRfYmxvY2tzF4DYJF1NKgCxRBmAsBQnEihSRVFVRVNUX0JMT0NLU19CWV9JRBIPFCUQJbE2AjYCWUIbgLJEDYCwFAkSLFJFUVVFU1RfQkxPQ0tTX0xFQVJORUQ2AVlCCoCwFAMSHFJFUVVFU1RfQkxPQ0tTNgFZsBQlNgCCVWMAAACJBElEDmxlYXJuZWSCQMuAARYUZ2V0X2Fycm93cxeA4SRdTSoAsUQZgLAUDRIoUkVRVUVTVF9BUlJPV1NfQllfSUQSFxQXEBexNgI2AllCG4CyRA2AsBQJEixSRVFVRVNUX0FSUk9XU19MRUFSTkVENgFZQgqAsBQDEhxSRVFVRVNUX0FSUk9XUzYBWbAUFzYAgVVjAAAAiRcXgjjLgAEWAFYVgOokXU0qALFEGYCwFAsSGlJFUVVFU1RfQllfSUQSFRQVEBWxNgI2AllCG4CyRA2AsBQJEh5SRVFVRVNUX0xFQVJORUQ2AVlCCoCwFAMSDlJFUVVFU1Q2AVmwFBU2AGMAAACJFRWDVLsBHhJzaG93X3RleHQXgPMuKTQqJi8rJwASAEASAGuxNAGE8jQBwxIAa7E0AbOAVrKAVSKBf9pEBICAQgOAIoF/s4FWsoBVIoF/+LOCVrKBVbODVhIAQrEQClVURi04NAKzhFEuAlawFA8SJlJFUVVFU1RfQ1VTVE9NX1RFWFSzNgJZEhBzbGVlcF9tc6g0AVmwFBBjaGVja19vazYAYwAAAIkIdGV4dBBwb3NpdGlvbmwZEBRjbGVhcl90ZXh0EYD+KgCwFA8SJFJFUVVFU1RfQ0xFQVJfVEVYVDYBWbAUDTYAYwAAAImBfCkaFmdldF92ZXJzaW9uCZADKiokKUIpALAUCRIwUkVRVUVTVF9GSVJNV0FSRV9WRVJTSU9ONgFZsBQQcmVhZF9jbWQ2ADACwcKxQwuAEgB7IwGyNAJZUWMSAHsjArI0AlmyY1FjAgAAiXMmVmVyc2lvbiBjaGVjayBmYWlsZWQuIE9sZGVyIHRoYW4gMC41PzpzC1ZlcnNpb24gaXM6eLuAAQ4SY2xhbXBfaW50CZAOABIAXhIGbWluEgZtYXiwsTQCsjQCNAFjAAACcg5sb3dfY2FwEGhpZ2hfY2Fw
"""

def calc_hash(b):
    return hexlify(uhashlib.sha256(b).digest()).decode()

# this is the hash of the compiled mpy
hash_gen='28eb3bd0b52a4443414e2cd1201ca87c8640bcd31e93b41bec8639b0a62dcecf'

pyhuskylens=ubinascii.a2b_base64(b64)
hash_initial=calc_hash(pyhuskylens)

try: # remove any old versions of pyhuskylens library
    uos.remove('/projects/pyhuskylens.py')
    uos.remove('/projects/pyhuskylens.mpy')
except OSError:
    pass

print('writing pyhuskylens.mpy to folder /projects')
with open('/projects/pyhuskylens.mpy','wb') as f:
    f.write(pyhuskylens)
print('Finished writing pyhuskylens.mpy.')
print('Checking hash.')
pyhuskylens_check=open('/projects/pyhuskylens.mpy','rb').read()
hash_check=calc_hash(pyhuskylens_check)

print('Hash generated: ',hash_gen)
error=False
if hash_initial != hash_gen:
    print('Failed hash of base64 input : '+hash_initial)
    error=True
if hash_check != hash_gen:
    print('Failed hash of .mpy on SPIKE: '+hash_check)
    error=True

if not error:
    print('pyhuskylens library written succesfully. Resetting....')
    machine.reset()
else:
    print('Failure in pyhuskylens library!')

